{"version":3,"sources":["components/info.js","components/form.js","components/weather.js","App.js","serviceWorker.js","index.js"],"names":["Info","Form","state","city","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","onSubmit","this","type","name","placeholder","onChange","disabled","React","Component","Weather","data","date","Date","dt","clouds","all","clouds1","wind","deg","temp","main","pressure","Math","trunc","windd","winds","speed","className","toLocaleDateString","APIkey","App","list","error","values","a","lang","test","fetch","apiURL","json","console","log","cod","filter","getHours","map","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","hours"],"mappings":"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","file":"static/js/main.b3df21f4.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Info = () => (\r\n    <div>\r\n        <h2>Погода ➯</h2>\r\n        <p>Узнайте погоду в вашем городе!</p>\r\n    </div>\r\n)\r\n\r\nexport default Info;","import React from \"react\";\r\n\r\nclass Form extends React.Component {\r\n    state = {\r\n        city: \"\",\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({ city: e.target.value });\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.onSubmit({ city: this.state.city });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    name=\"city\"\r\n                    value={this.state.city}\r\n                    placeholder=\"Город\"\r\n                    onChange={this.handleChange}\r\n                />\r\n                <button type=\"submit\" disabled={this.state.city === \"\"}>Найти</button>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;","import React from \"react\";\r\n\r\nconst Weather = props => {\r\n    const { data } = props;\r\n\r\n    const date = new Date(data.dt * 1000);\r\n\r\n     if (data.clouds.all<=25) {\r\n         var clouds1 = \"Ясно\";\r\n     }  \r\n     if (data.clouds.all>25 && data.clouds.all<=50) {\r\n         clouds1 = \"Переменная облачность\";\r\n     }  \r\n     if (data.clouds.all>50 && data.clouds.all<=75) {\r\n         clouds1 = \"Облачно\";\r\n     }  \r\n     if (data.clouds.all>75) {\r\n         clouds1 = \"Пасмурно\";\r\n     }  \r\n     if (data.wind.deg>337.5 && data.wind.deg<=22.5) {\r\n         var wind = \"С\";\r\n     }  \r\n     if (data.wind.deg>22.5 && data.wind.deg<=67.5) {\r\n         wind = \"СВ\";\r\n     }  \r\n     if (data.wind.deg>67.5 && data.wind.deg<=112.5) {\r\n         wind = \"В\";\r\n     }  \r\n     if (data.wind.deg>112.5 && data.wind.deg<=157.5) {\r\n         wind = \"ЮВ\";\r\n     }  \r\n     if (data.wind.deg>157.5 && data.wind.deg<=202.5) {\r\n         wind = \"Ю\";\r\n     }  \r\n     if (data.wind.deg>202.5 && data.wind.deg<=247.5) {\r\n         wind = \"ЮЗ\";\r\n     }  \r\n     if (data.wind.deg>247.5 && data.wind.deg<=292.5) {\r\n         wind = \"З\";\r\n     }  \r\n     if (data.wind.deg>292.5 && data.wind.deg<=337.5) {\r\n         wind = \"СЗ\";\r\n     }\r\n\r\n\r\n    const temp = data.main.temp;\r\n    const clouds = clouds1;\r\n    const pressure = Math.trunc((data.main.pressure)*0.75006375541921);\r\n    const windd = wind;\r\n    const winds = data.wind.speed;\r\n    return (\r\n        <div className=\"infoWeath\">\r\n            <p><b>{date.toLocaleDateString()}</b></p>\r\n            <div>\r\n                <p>Температура: {temp}°C</p>\r\n                <p>Облачность: {clouds}</p>\r\n                <p>Давление: {pressure} мм рт. ст.</p>\r\n                <p>Ветер: {windd}, {winds} м/с</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Weather;\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport Info from \"./components/info\";\r\nimport Form from \"./components/form\";\r\nimport Weather from \"./components/weather\";\r\n\r\nconst APIkey = \"4108158e1a1ac40620f94bfd83f37504\";\r\n\r\nclass App extends React.Component{\r\n    state = {\r\n        list: [],\r\n        error: null,\r\n    }\r\n\r\n    handleSubmit = async (values) => {\r\n        const { city } = values;\r\n        const lang = /^[a-z-]+$/i.test(city) ? \"en\" : \"ru\";\r\n        const apiURL = await fetch(`https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${APIkey}&units=metric&lang=${lang}`);\r\n        const data = await apiURL.json();\r\n        console.log(data);\r\n\r\n        if (data.cod === \"200\") {\r\n            this.setState({\r\n                list: data.list.filter(({ dt }) => new Date(dt * 1000).getHours() === 12),\r\n                error: null\r\n            });\r\n        } else {\r\n            this.setState({\r\n                list: [],\r\n                error: \"Такого города не существует\"\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"wrapper\">\r\n                <div className=\"main\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-sm-5 info\">\r\n                                <Info />\r\n                            </div>\r\n                            <div className=\"col-sm-7 form\">\r\n                                <Form onSubmit={this.handleSubmit} />\r\n                                {this.state.error && <p className=\"error\">{this.state.error}</p>}\r\n                                {this.state.list.map(data => (\r\n                                    <Weather key={data.dt} data = {data} />\r\n                                ))}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n\nvar date = new Date();\nvar hours = date.getHours();\nif (hours > 8 && hours <= 16) {\n  import(\"./Day.css\");\n}\nelse if (hours > 4 && hours <= 8) {\n  import(\"./Sunrise.css\");\n}\nelse if (hours > 16 && hours <= 20) {\n  import(\"./Sunrise.css\");\n}\nelse {\n  import(\"./Night.css\");\n}"],"sourceRoot":""}